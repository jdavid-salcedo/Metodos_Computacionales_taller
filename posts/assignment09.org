#+TITLE: Assignment09
#+SETUPFILE: ~/Desktop/Metodos_Computacionales_taller/Tareas/Entrega_tareas_2021/1001577699/org-html-themes/org/theme-readtheorg-local.setup

Usual imports and configs
#+begin_src ipython :session asession :results raw drawer
%config InlineBackend.figure_format = 'svg'
import numpy as np
import matplotlib.pyplot as plt
import scipy.integrate as integrate
#+end_src

#+RESULTS:
:results:
# Out[20]:
:end:

* Numerical evaluation of ODEs in python
The ODE we want to assess first is the following one: Let $y$ be the horizontal position of some free-falling body.
\[ y''(t) + \frac{b}{m} y'(t) - g = 0 \]
Of course, we are provided with some initital conditions on $r(0)$.
#+begin_src ipython :session asession :results raw drawer
def height(r, t, params):
    ''' Height of the projectile depending on past
    values of height and velocity '''
    pos, vel = r
    m, b, g = params
    drvtvs = [vel, g - (b/m)*vel]
    return drvtvs
#+end_src

#+RESULTS:
:results:
# Out[24]:
:end:
We define the initial conditions:
#+begin_src ipython :session asession :results raw drawer
# initial conditions
y_0 = 4000
v_0 = 0
r_0 = np.array([y_0, v_0])
# parameters
m = 10
b = 0.5
g = 9.8
params = (m, b, g)
# time domain
t = np.linspace(0,100,10000)
#+end_src

#+RESULTS:
:results:
# Out[30]:
:end:
#+begin_src ipython :session asession :results raw drawer
y = integrate.odeint(height, r_0, t, args=(params,))

fig = plt.figure(figsize=(10,8))

plt.subplot(211)
# plot the postitions
plt.plot(t, y[:,0], 'k-')
plt.ylabel('Position')
plt.grid()

plt.subplot(212)
# plot the velocities
plt.plot(t, y[:,1], 'b-')
plt.ylabel('Velocity')
plt.grid()

plt.show()
#+end_src

#+RESULTS:
:results:
# Out[35]:
[[file:./obipy-resources/W11Cv5.svg]]
:end:
